
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVISIONleftDIVMODleftEQNEQLTELTGTGTEleftORANDAND ASSIGNMENT BEGIN CHAR COLON COMMA DIV DIVISION DO DOT DOTDOT DOWNTO ELSE END EQ FALSE FOR FUNCTION GT GTE IDENTIFIER IF INTEGER LBRACKET LPAREN LT LTE MINUS MOD NEQ NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET REAL REPEAT RPAREN SEMICOLON STRING TARRAY TBOOLEAN TCHAR THEN TIMES TINTEGER TO TREAL TRUE TSTRING UNTIL VAR WHILEprogram : header SEMICOLON global_part block DOTheader : PROGRAM identifierglobal_part : sub_declaration_list\n\t\t\t\t\t| empty empty :sub_declaration_list : sub_declaration SEMICOLON sub_declaration_list\n                            | sub_declaration SEMICOLONvariable_declaration_part : VAR variable_declaration_listvariable_declaration_list : variable_declaration variable_declaration_list\n\t\t\t\t\t\t\t\t| variable_declarationvariable_declaration : identifier_list COLON type SEMICOLONidentifier_list : identifier COMMA identifier_list\n\t\t\t\t\t| identifieridentifier : IDENTIFIERsub_declaration : procedure_declaration\n                       | function_declarationprocedure_declaration : procedure_heading SEMICOLON blockprocedure_heading : PROCEDURE identifier \n\t\t\t\t\t\t| PROCEDURE identifier LPAREN RPAREN\n\t\t\t\t\t\t| PROCEDURE identifier LPAREN parameter_list RPARENfunction_declaration : function_heading SEMICOLON block function_heading : FUNCTION type\n\t\t\t\t\t\t| FUNCTION identifier LPAREN RPAREN COLON type\n\t\t\t\t\t\t| FUNCTION identifier COLON type\n\t\t\t\t\t\t| FUNCTION identifier LPAREN parameter_list RPAREN COLON typeblock : optional_vardec statement_partoptional_vardec : variable_declaration_part\n\t\t\t\t\t| emptyparameter_list : parameter COMMA parameter_list\n\t\t\t\t\t| parameterparameter : identifier COLON type type : TREAL \n\t\t\t| TINTEGER\n\t\t\t| TCHAR\n\t\t\t| TSTRING\n\t\t\t| TBOOLEAN\n\t\t\t| TSTRING LBRACKET integer RBRACKET\n\t\t\t| TARRAY LBRACKET integer DOTDOT integer RBRACKET OF typestatement_part : BEGIN statement_sequence ENDstatement_sequence : statement SEMICOLON statement_sequence\n\t\t\t\t\t\t| statementstatement : assignment_statement\n\t\t\t\t| statement_part\n\t\t\t\t| if_statement\n\t\t\t\t| while_statement\n\t\t\t\t| repeat_statement\n\t\t\t\t| for_statement\n\t\t\t\t| procedure_or_function_call\n\t\t\t\t| empty\n\tprocedure_or_function_call : identifier\n\t\t\t\t\t\t\t\t| identifier LPAREN param_list RPARENparam_list : param_list COMMA param\n\t\t\t\t| paramparam : expression if_statement : IF expression THEN statement ELSE statement\n\t\t\t\t\t| IF expression THEN statement\n\twhile_statement : WHILE expression DO statementrepeat_statement : REPEAT statement UNTIL expressionfor_statement : FOR assignment_statement TO expression DO statement\n\t\t\t\t\t| FOR assignment_statement DOWNTO expression DO statement\n\tassignment_statement : identifier ASSIGNMENT expressionexpression : expression and_or expression_m\n\t\t\t\t| expression_m\n\texpression_m : expression_s\n\t\t\t\t\t| expression_m sign expression_sexpression_s : element \n\t\t\t\t\t| expression_s psign elementand_or : AND\n\t\t\t| ORpsign : TIMES\n\t\t\t| DIVISIONsign : PLUS\n\t\t\t| MINUS\n\t\t\t| DIV\n\t\t\t| MOD\n\t\t\t| EQ\n\t\t\t| NEQ\n\t\t\t| LT\n\t\t\t| LTE\n\t\t\t| GT\n\t\t\t| GTE\n\telement : identifier\n\t\t\t| identifier LBRACKET expression RBRACKET\n\t\t\t| real\n\t\t\t| integer\n\t\t\t| string\n\t\t\t| char\n\t\t\t| boolean\n\t\t\t| LPAREN expression RPAREN\n\t\t\t| NOT element\n\t\t\t| function_call_inline\n\tfunction_call_inline : identifier LPAREN param_list RPAREN\n\t\t\t\t\t\t| identifier LPAREN RPARENreal : REALinteger : INTEGERstring : STRINGchar : CHARboolean : TRUE\n\t\t\t   | FALSE'
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,34,],[0,-1,]),'SEMICOLON':([2,5,6,10,11,12,13,14,25,26,28,29,30,31,32,35,36,42,43,50,51,52,53,54,55,56,57,58,59,68,73,75,77,78,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,103,106,110,113,117,138,139,146,149,151,152,153,154,157,158,159,160,163,166,167,168,169,170,172,173,174,175,],[4,-2,-14,22,-15,-16,23,24,-18,-22,-32,-33,-34,-35,-36,-26,-5,-17,-21,78,-42,-43,-44,-45,-46,-47,-48,-49,-50,-19,-24,-95,-39,-5,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,143,-20,-37,-61,-5,-90,-5,-23,-51,-56,-62,-65,-67,-93,-89,-57,-58,-25,-5,-83,-92,-5,-5,-55,-59,-60,-38,]),'IDENTIFIER':([3,15,16,21,36,38,44,45,60,61,62,63,66,78,79,80,91,92,107,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,140,141,142,143,150,166,169,170,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-68,-69,6,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,6,-70,-71,6,6,6,6,6,6,-11,6,6,6,6,]),'VAR':([4,7,8,9,22,23,24,41,],[-5,21,-3,-4,-7,21,21,-6,]),'BEGIN':([4,7,8,9,18,19,20,22,23,24,36,37,38,41,62,64,78,117,139,143,166,169,170,],[-5,-5,-3,-4,36,-27,-28,-7,-5,-5,36,-8,-10,-6,36,-9,36,36,36,-11,36,36,36,]),'PROCEDURE':([4,22,],[15,15,]),'FUNCTION':([4,22,],[16,16,]),'LPAREN':([6,25,27,59,60,61,79,80,85,91,92,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,150,],[-14,44,45,80,91,91,91,91,136,91,91,91,-68,-69,91,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,91,-70,-71,91,91,91,91,91,91,]),'COLON':([6,27,39,40,67,71,104,109,],[-14,46,65,-13,105,108,-12,147,]),'COMMA':([6,28,29,30,31,32,40,70,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,110,114,115,116,138,144,152,153,154,156,157,158,165,167,168,175,],[-14,-32,-33,-34,-35,-36,66,107,-95,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-37,150,-53,-54,-90,-31,-62,-65,-67,150,-93,-89,-52,-83,-92,-38,]),'ASSIGNMENT':([6,59,102,],[-14,79,79,]),'END':([6,36,49,50,51,52,53,54,55,56,57,58,59,75,77,78,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,112,113,117,138,139,149,151,152,153,154,157,158,159,160,166,167,168,169,170,172,173,174,],[-14,-5,77,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-95,-39,-5,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-40,-61,-5,-90,-5,-51,-56,-62,-65,-67,-93,-89,-57,-58,-5,-83,-92,-5,-5,-55,-59,-60,]),'LBRACKET':([6,31,33,85,],[-14,47,48,135,]),'TIMES':([6,75,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,153,154,157,158,167,168,],[-14,-95,133,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,133,-67,-93,-89,-83,-92,]),'DIVISION':([6,75,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,153,154,157,158,167,168,],[-14,-95,134,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,134,-67,-93,-89,-83,-92,]),'PLUS':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,122,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,122,-65,-67,-93,-89,-83,-92,]),'MINUS':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,123,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,123,-65,-67,-93,-89,-83,-92,]),'DIV':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,124,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,124,-65,-67,-93,-89,-83,-92,]),'MOD':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,125,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,125,-65,-67,-93,-89,-83,-92,]),'EQ':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,126,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,126,-65,-67,-93,-89,-83,-92,]),'NEQ':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,127,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,127,-65,-67,-93,-89,-83,-92,]),'LT':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,128,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,128,-65,-67,-93,-89,-83,-92,]),'LTE':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,129,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,129,-65,-67,-93,-89,-83,-92,]),'GT':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,130,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,130,-65,-67,-93,-89,-83,-92,]),'GTE':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,131,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,131,-65,-67,-93,-89,-83,-92,]),'THEN':([6,75,81,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,152,153,154,157,158,167,168,],[-14,-95,117,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,-62,-65,-67,-93,-89,-83,-92,]),'AND':([6,75,81,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,99,113,116,137,138,152,153,154,155,157,158,160,161,162,167,168,],[-14,-95,119,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,119,119,119,119,-90,-62,-65,-67,119,-93,-89,119,119,119,-83,-92,]),'OR':([6,75,81,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,99,113,116,137,138,152,153,154,155,157,158,160,161,162,167,168,],[-14,-95,120,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,120,120,120,120,-90,-62,-65,-67,120,-93,-89,120,120,120,-83,-92,]),'DO':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,99,138,152,153,154,157,158,161,162,167,168,],[-14,-95,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,139,-90,-62,-65,-67,-93,-89,169,170,-83,-92,]),'UNTIL':([6,51,52,53,54,55,56,57,58,59,62,75,77,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,100,113,117,138,139,149,151,152,153,154,157,158,159,160,166,167,168,169,170,172,173,174,],[-14,-42,-43,-44,-45,-46,-47,-48,-49,-50,-5,-95,-39,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,140,-61,-5,-90,-5,-51,-56,-62,-65,-67,-93,-89,-57,-58,-5,-83,-92,-5,-5,-55,-59,-60,]),'TO':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,101,113,138,152,153,154,157,158,167,168,],[-14,-95,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,141,-61,-90,-62,-65,-67,-93,-89,-83,-92,]),'DOWNTO':([6,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,101,113,138,152,153,154,157,158,167,168,],[-14,-95,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,142,-61,-90,-62,-65,-67,-93,-89,-83,-92,]),'ELSE':([6,51,52,53,54,55,56,57,58,59,75,77,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,113,117,138,139,149,151,152,153,154,157,158,159,160,166,167,168,169,170,172,173,174,],[-14,-42,-43,-44,-45,-46,-47,-48,-49,-50,-95,-39,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-61,-5,-90,-5,-51,166,-62,-65,-67,-93,-89,-57,-58,-5,-83,-92,-5,-5,-55,-59,-60,]),'RPAREN':([6,28,29,30,31,32,44,45,69,70,72,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,110,114,115,116,136,137,138,144,145,152,153,154,156,157,158,165,167,168,175,],[-14,-32,-33,-34,-35,-36,68,71,106,-30,109,-95,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-37,149,-53,-54,157,158,-90,-31,-29,-62,-65,-67,168,-93,-89,-52,-83,-92,-38,]),'RBRACKET':([6,74,75,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,138,148,152,153,154,155,157,158,167,168,],[-14,110,-95,-63,-64,-66,-82,-84,-85,-86,-87,-88,-91,-94,-96,-97,-98,-99,-90,164,-62,-65,-67,167,-93,-89,-83,-92,]),'TREAL':([16,46,65,105,108,147,171,],[28,28,28,28,28,28,28,]),'TINTEGER':([16,46,65,105,108,147,171,],[29,29,29,29,29,29,29,]),'TCHAR':([16,46,65,105,108,147,171,],[30,30,30,30,30,30,30,]),'TSTRING':([16,46,65,105,108,147,171,],[31,31,31,31,31,31,31,]),'TBOOLEAN':([16,46,65,105,108,147,171,],[32,32,32,32,32,32,32,]),'TARRAY':([16,46,65,105,108,147,171,],[33,33,33,33,33,33,33,]),'DOT':([17,35,77,],[34,-26,-39,]),'IF':([36,62,78,117,139,166,169,170,],[60,60,60,60,60,60,60,60,]),'WHILE':([36,62,78,117,139,166,169,170,],[61,61,61,61,61,61,61,61,]),'REPEAT':([36,62,78,117,139,166,169,170,],[62,62,62,62,62,62,62,62,]),'FOR':([36,62,78,117,139,166,169,170,],[63,63,63,63,63,63,63,63,]),'INTEGER':([47,48,60,61,79,80,91,92,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,150,],[75,75,75,75,75,75,75,75,75,75,-68,-69,75,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,75,-70,-71,75,75,75,75,75,75,]),'NOT':([60,61,79,80,91,92,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,150,],[92,92,92,92,92,92,92,-68,-69,92,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,92,-70,-71,92,92,92,92,92,92,]),'REAL':([60,61,79,80,91,92,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,150,],[94,94,94,94,94,94,94,-68,-69,94,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,94,-70,-71,94,94,94,94,94,94,]),'STRING':([60,61,79,80,91,92,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,150,],[95,95,95,95,95,95,95,-68,-69,95,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,95,-70,-71,95,95,95,95,95,95,]),'CHAR':([60,61,79,80,91,92,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,150,],[96,96,96,96,96,96,96,-68,-69,96,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,96,-70,-71,96,96,96,96,96,96,]),'TRUE':([60,61,79,80,91,92,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,150,],[97,97,97,97,97,97,97,-68,-69,97,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,97,-70,-71,97,97,97,97,97,97,]),'FALSE':([60,61,79,80,91,92,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,150,],[98,98,98,98,98,98,98,-68,-69,98,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,98,-70,-71,98,98,98,98,98,98,]),'DOTDOT':([75,76,],[-95,111,]),'OF':([164,],[171,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'header':([0,],[2,]),'identifier':([3,15,16,21,36,38,44,45,60,61,62,63,66,78,79,80,91,92,107,117,118,121,132,135,136,139,140,141,142,150,166,169,170,],[5,25,27,40,59,40,67,67,85,85,59,102,40,59,85,85,85,85,67,59,85,85,85,85,85,59,85,85,85,85,59,59,59,]),'global_part':([4,],[7,]),'sub_declaration_list':([4,22,],[8,41,]),'empty':([4,7,23,24,36,62,78,117,139,166,169,170,],[9,20,20,20,58,58,58,58,58,58,58,58,]),'sub_declaration':([4,22,],[10,10,]),'procedure_declaration':([4,22,],[11,11,]),'function_declaration':([4,22,],[12,12,]),'procedure_heading':([4,22,],[13,13,]),'function_heading':([4,22,],[14,14,]),'block':([7,23,24,],[17,42,43,]),'optional_vardec':([7,23,24,],[18,18,18,]),'variable_declaration_part':([7,23,24,],[19,19,19,]),'type':([16,46,65,105,108,147,171,],[26,73,103,144,146,163,175,]),'statement_part':([18,36,62,78,117,139,166,169,170,],[35,52,52,52,52,52,52,52,52,]),'variable_declaration_list':([21,38,],[37,64,]),'variable_declaration':([21,38,],[38,38,]),'identifier_list':([21,38,66,],[39,39,104,]),'statement_sequence':([36,78,],[49,112,]),'statement':([36,62,78,117,139,166,169,170,],[50,100,50,151,159,172,173,174,]),'assignment_statement':([36,62,63,78,117,139,166,169,170,],[51,51,101,51,51,51,51,51,51,]),'if_statement':([36,62,78,117,139,166,169,170,],[53,53,53,53,53,53,53,53,]),'while_statement':([36,62,78,117,139,166,169,170,],[54,54,54,54,54,54,54,54,]),'repeat_statement':([36,62,78,117,139,166,169,170,],[55,55,55,55,55,55,55,55,]),'for_statement':([36,62,78,117,139,166,169,170,],[56,56,56,56,56,56,56,56,]),'procedure_or_function_call':([36,62,78,117,139,166,169,170,],[57,57,57,57,57,57,57,57,]),'parameter_list':([44,45,107,],[69,72,145,]),'parameter':([44,45,107,],[70,70,70,]),'integer':([47,48,60,61,79,80,91,92,111,118,121,132,135,136,140,141,142,150,],[74,76,87,87,87,87,87,87,148,87,87,87,87,87,87,87,87,87,]),'expression':([60,61,79,80,91,135,136,140,141,142,150,],[81,99,113,116,137,155,116,160,161,162,116,]),'expression_m':([60,61,79,80,91,118,135,136,140,141,142,150,],[82,82,82,82,82,152,82,82,82,82,82,82,]),'expression_s':([60,61,79,80,91,118,121,135,136,140,141,142,150,],[83,83,83,83,83,83,153,83,83,83,83,83,83,]),'element':([60,61,79,80,91,92,118,121,132,135,136,140,141,142,150,],[84,84,84,84,84,138,84,84,154,84,84,84,84,84,84,]),'real':([60,61,79,80,91,92,118,121,132,135,136,140,141,142,150,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'string':([60,61,79,80,91,92,118,121,132,135,136,140,141,142,150,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'char':([60,61,79,80,91,92,118,121,132,135,136,140,141,142,150,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'boolean':([60,61,79,80,91,92,118,121,132,135,136,140,141,142,150,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'function_call_inline':([60,61,79,80,91,92,118,121,132,135,136,140,141,142,150,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'param_list':([80,136,],[114,156,]),'param':([80,136,150,],[115,115,165,]),'and_or':([81,99,113,116,137,155,160,161,162,],[118,118,118,118,118,118,118,118,118,]),'sign':([82,152,],[121,121,]),'psign':([83,153,],[132,132,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> header SEMICOLON global_part block DOT','program',5,'p_program_start','parser.py',23),
  ('header -> PROGRAM identifier','header',2,'p_header','parser.py',27),
  ('global_part -> sub_declaration_list','global_part',1,'p_global_part','parser.py',32),
  ('global_part -> empty','global_part',1,'p_global_part','parser.py',33),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',37),
  ('sub_declaration_list -> sub_declaration SEMICOLON sub_declaration_list','sub_declaration_list',3,'p_sub_declaration_list','parser.py',41),
  ('sub_declaration_list -> sub_declaration SEMICOLON','sub_declaration_list',2,'p_sub_declaration_list','parser.py',42),
  ('variable_declaration_part -> VAR variable_declaration_list','variable_declaration_part',2,'p_variable_declaration_part','parser.py',50),
  ('variable_declaration_list -> variable_declaration variable_declaration_list','variable_declaration_list',2,'p_variable_declaration_list','parser.py',54),
  ('variable_declaration_list -> variable_declaration','variable_declaration_list',1,'p_variable_declaration_list','parser.py',55),
  ('variable_declaration -> identifier_list COLON type SEMICOLON','variable_declaration',4,'p_variable_declaration','parser.py',63),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','parser.py',68),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',69),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','parser.py',76),
  ('sub_declaration -> procedure_declaration','sub_declaration',1,'p_sub_declaration','parser.py',80),
  ('sub_declaration -> function_declaration','sub_declaration',1,'p_sub_declaration','parser.py',81),
  ('procedure_declaration -> procedure_heading SEMICOLON block','procedure_declaration',3,'p_procedure_declaration','parser.py',86),
  ('procedure_heading -> PROCEDURE identifier','procedure_heading',2,'p_procedure_heading','parser.py',90),
  ('procedure_heading -> PROCEDURE identifier LPAREN RPAREN','procedure_heading',4,'p_procedure_heading','parser.py',91),
  ('procedure_heading -> PROCEDURE identifier LPAREN parameter_list RPAREN','procedure_heading',5,'p_procedure_heading','parser.py',92),
  ('function_declaration -> function_heading SEMICOLON block','function_declaration',3,'p_function_declaration','parser.py',101),
  ('function_heading -> FUNCTION type','function_heading',2,'p_function_heading','parser.py',105),
  ('function_heading -> FUNCTION identifier LPAREN RPAREN COLON type','function_heading',6,'p_function_heading','parser.py',106),
  ('function_heading -> FUNCTION identifier COLON type','function_heading',4,'p_function_heading','parser.py',107),
  ('function_heading -> FUNCTION identifier LPAREN parameter_list RPAREN COLON type','function_heading',7,'p_function_heading','parser.py',108),
  ('block -> optional_vardec statement_part','block',2,'p_block','parser.py',119),
  ('optional_vardec -> variable_declaration_part','optional_vardec',1,'p_optional_vardec','parser.py',123),
  ('optional_vardec -> empty','optional_vardec',1,'p_optional_vardec','parser.py',124),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','parser.py',128),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',129),
  ('parameter -> identifier COLON type','parameter',3,'p_parameter','parser.py',136),
  ('type -> TREAL','type',1,'p_type','parser.py',140),
  ('type -> TINTEGER','type',1,'p_type','parser.py',141),
  ('type -> TCHAR','type',1,'p_type','parser.py',142),
  ('type -> TSTRING','type',1,'p_type','parser.py',143),
  ('type -> TBOOLEAN','type',1,'p_type','parser.py',144),
  ('type -> TSTRING LBRACKET integer RBRACKET','type',4,'p_type','parser.py',145),
  ('type -> TARRAY LBRACKET integer DOTDOT integer RBRACKET OF type','type',8,'p_type','parser.py',146),
  ('statement_part -> BEGIN statement_sequence END','statement_part',3,'p_statement_part','parser.py',155),
  ('statement_sequence -> statement SEMICOLON statement_sequence','statement_sequence',3,'p_statement_sequence','parser.py',159),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','parser.py',160),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',167),
  ('statement -> statement_part','statement',1,'p_statement','parser.py',168),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',169),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',170),
  ('statement -> repeat_statement','statement',1,'p_statement','parser.py',171),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',172),
  ('statement -> procedure_or_function_call','statement',1,'p_statement','parser.py',173),
  ('statement -> empty','statement',1,'p_statement','parser.py',174),
  ('procedure_or_function_call -> identifier','procedure_or_function_call',1,'p_procedure_or_function_call','parser.py',179),
  ('procedure_or_function_call -> identifier LPAREN param_list RPAREN','procedure_or_function_call',4,'p_procedure_or_function_call','parser.py',180),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',187),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',188),
  ('param -> expression','param',1,'p_param','parser.py',195),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',199),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','parser.py',200),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','parser.py',208),
  ('repeat_statement -> REPEAT statement UNTIL expression','repeat_statement',4,'p_repeat_statement','parser.py',213),
  ('for_statement -> FOR assignment_statement TO expression DO statement','for_statement',6,'p_for_statement','parser.py',217),
  ('for_statement -> FOR assignment_statement DOWNTO expression DO statement','for_statement',6,'p_for_statement','parser.py',218),
  ('assignment_statement -> identifier ASSIGNMENT expression','assignment_statement',3,'p_assignment_statement','parser.py',223),
  ('expression -> expression and_or expression_m','expression',3,'p_expression','parser.py',227),
  ('expression -> expression_m','expression',1,'p_expression','parser.py',228),
  ('expression_m -> expression_s','expression_m',1,'p_expression_m','parser.py',236),
  ('expression_m -> expression_m sign expression_s','expression_m',3,'p_expression_m','parser.py',237),
  ('expression_s -> element','expression_s',1,'p_expression_s','parser.py',244),
  ('expression_s -> expression_s psign element','expression_s',3,'p_expression_s','parser.py',245),
  ('and_or -> AND','and_or',1,'p_and_or','parser.py',252),
  ('and_or -> OR','and_or',1,'p_and_or','parser.py',253),
  ('psign -> TIMES','psign',1,'p_psign','parser.py',257),
  ('psign -> DIVISION','psign',1,'p_psign','parser.py',258),
  ('sign -> PLUS','sign',1,'p_sign','parser.py',262),
  ('sign -> MINUS','sign',1,'p_sign','parser.py',263),
  ('sign -> DIV','sign',1,'p_sign','parser.py',264),
  ('sign -> MOD','sign',1,'p_sign','parser.py',265),
  ('sign -> EQ','sign',1,'p_sign','parser.py',266),
  ('sign -> NEQ','sign',1,'p_sign','parser.py',267),
  ('sign -> LT','sign',1,'p_sign','parser.py',268),
  ('sign -> LTE','sign',1,'p_sign','parser.py',269),
  ('sign -> GT','sign',1,'p_sign','parser.py',270),
  ('sign -> GTE','sign',1,'p_sign','parser.py',271),
  ('element -> identifier','element',1,'p_element','parser.py',276),
  ('element -> identifier LBRACKET expression RBRACKET','element',4,'p_element','parser.py',277),
  ('element -> real','element',1,'p_element','parser.py',278),
  ('element -> integer','element',1,'p_element','parser.py',279),
  ('element -> string','element',1,'p_element','parser.py',280),
  ('element -> char','element',1,'p_element','parser.py',281),
  ('element -> boolean','element',1,'p_element','parser.py',282),
  ('element -> LPAREN expression RPAREN','element',3,'p_element','parser.py',283),
  ('element -> NOT element','element',2,'p_element','parser.py',284),
  ('element -> function_call_inline','element',1,'p_element','parser.py',285),
  ('function_call_inline -> identifier LPAREN param_list RPAREN','function_call_inline',4,'p_function_call_inline','parser.py',297),
  ('function_call_inline -> identifier LPAREN RPAREN','function_call_inline',3,'p_function_call_inline','parser.py',298),
  ('real -> REAL','real',1,'p_real','parser.py',305),
  ('integer -> INTEGER','integer',1,'p_integer','parser.py',309),
  ('string -> STRING','string',1,'p_string','parser.py',313),
  ('char -> CHAR','char',1,'p_char','parser.py',317),
  ('boolean -> TRUE','boolean',1,'p_boolean','parser.py',321),
  ('boolean -> FALSE','boolean',1,'p_boolean','parser.py',322),
]
